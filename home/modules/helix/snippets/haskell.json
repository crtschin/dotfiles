{
	// Place your snippets for haskell here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Language Pragma": {
		"prefix": "lang",
		"body": [
			"{-# LANGUAGE $1 #-}",
			"$0"
		],
		"description": "Right arrow"
	},
	"SCC": {
		"prefix": "scc",
		"body": [
			"{-# SCC $0 #-}",
		],
		"description": "call centre"
	},
	"Function": {
		"prefix": "fn",
		"body": [
			"$1 :: $2",
			"$1 $3= $0"
		],
		"description": "Function definition"
	},
	"Module": {
		"prefix": "mod",
		"body": [
			"module $1 where",
			"$0"
		],
		"description": "Module definition"
	},
	"inlineable": {
		"prefix": "inl",
		"body": [
			"{-# INLINEABLE $0 #-}",
		],
		"description": "inlineable declaration"
	},
	"aeson instances": {
		"prefix": "aeson",
		"body": [
			"instance FromJSON $0 where",
			"  {-# INLINEABLE parseJSON #-}",
			"  parseJSON val = undefined",
			"",
			"instance ToJSON $0 where",
			"  toJSON = error \"don't use toJSON, use toEncoding instead\"",
			"  {-# INLINEABLE toEncoding #-}",
			"  toEncoding val = undefined",
			"",
		],
		"description": "aeson instances"
	},
	"openapi toschema instances": {
		"prefix": "toschema",
		"body": [
			"instance ToSchema $0 where",
			"  -- TODO(https://github.com/channable/jobmachine/issues/32): Implement this.",
			"  declareNamedSchema _ = pure $ OpenApi.NamedSchema (Just \"$0\") mempty",
			"",
		],
		"description": "aeson instances"
	},
	"openapi toparamschema instances": {
		"prefix": "toparam",
		"body": [
			"instance ToParamSchema $0 where",
			"  -- TODO(https://github.com/channable/jobmachine/issues/32): Implement this.",
			"  toParamSchema _ = mempty",
			"",
		],
		"description": "aeson instances"
	},
	"pattern synonym string constant": {
		"prefix": "patstr",
		"body": [
			"pattern $0 :: (IsString s, Eq s) => s",
			"pattern $0 = \"$1\"",
			"",
		],
		"description": "pattern synonym for a string constant"
	},
	"Import": {
		"prefix": "imp",
		"body": [
			"import $1",
			"$0"
		],
		"description": "Module definition"
	},
	"->": {
		"prefix": "r",
		"body": [
			"-> $0"
		],
		"description": "Right arrow"
	},
	"<-": {
		"prefix": "l",
		"body": [
			"<- $0"
		],
		"description": "Left arrow"
	},
	"<*>": {
		"prefix": "apply",
		"body": [
			"<*> $0"
		],
		"description": "Apply operator"
	},
	"<$>": {
		"prefix": "fmap",
		"body": [
			"<$> $0"
		],
		"description": "Fmap operator"
	}
}
